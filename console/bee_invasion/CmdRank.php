<?php

/**
 * Created by PhpStorm.
 * User: markedboat
 * Date: 2018/7/20
 * Time: 11:01
 */

namespace console\bee_invasion;

use models\common\CmdBase;
use models\common\opt\Opt;
use models\common\sys\Sys;
use models\ext\tool\Curl;
use models\ext\tool\Printer;
use modules\bee_invasion\v1\dao\game\economy\PlatOrderDao;
use modules\bee_invasion\v1\dao\game\economy\PlatSrcDao;
use modules\bee_invasion\v1\dao\game\rank\RankTopDao;
use modules\bee_invasion\v1\dao\game\rank\RoleScoreDataDao;
use modules\bee_invasion\v1\dao\game\rank\RoleStageScoreDao;
use modules\bee_invasion\v1\dao\user\UserFakeDao;
use modules\bee_invasion\v1\model\cache\ApiCache;
use modules\bee_invasion\v1\model\economy\ConsumableGoods;
use modules\bee_invasion\v1\model\economy\Currency;
use modules\bee_invasion\v1\model\economy\MObject;
use modules\bee_invasion\v1\model\economy\plat\Partner;
use modules\bee_invasion\v1\model\game\Channel;
use modules\bee_invasion\v1\model\game\RankTop;
use modules\bee_invasion\v1\model\user\User;
use modules\bee_invasion\v1\model\user\UserCg;
use modules\bee_invasion\v1\model\user\UserCgHis;
use modules\bee_invasion\v1\model\user\UserCurrency;
use modules\bee_invasion\v1\model\user\UserCurrencyHis;
use modules\bee_invasion\v1\model\user\UserObjectHis;
use modules\bee_invasion\v1\model\user\UserRankAwardHis;

class CmdRank extends CmdBase
{

    /** @var Printer */
    protected $printer;
    protected $ymd = 0;

    public static function getClassName()
    {
        return __CLASS__;
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->printer = new Printer();

        $this->ymd = $this->inputDataBox->tryGetInt('ymd');
        if (empty($this->ymd))
        {
            $this->ymd = date('Ymd', time() - 86400);
        }

    }


    public function generate2()
    {
        $now_date = date('Y-m-d H:i:s', time());
        echo "\nnow:{$now_date} generate  start\n";
        $fake_user_ids = array_map(function ($model) { return $model->id; }, UserFakeDao::model()->setLimit(0, 10000)->findAllByWhere(['is_ok' => Opt::isOk]));
        $channels      = Channel::model()->findAllByWhere(['is_ok' => Opt::isOk]);

        $channel_ranks = [];
        /** @var modules\bee_invasion\v1\model\game\Channel[] $channel_map */
        $channel_map = [];
        $ymd         = $this->inputDataBox->tryGetInt('ymd');
        if (empty($ymd))
        {
            $ymd = date('Ymd', time() - 86400);
        }
        $fake_user_max_index = count($fake_user_ids) - 1;

        $this->printer->newTabEcho('get_fake_user', 'get_fake_user');
        foreach ($channels as $channel)
        {
            $channel_ranks[$channel->item_code] = [];
            $channel_map[$channel->item_code]   = $channel;

            while (1)
            {
                $id = $fake_user_ids[rand(0, $fake_user_max_index)];
                if (!in_array($id, $channel_ranks[$channel->item_code], true))
                {
                    $channel_ranks[$channel->item_code][] = $id;
                    if (count($channel_ranks[$channel->item_code]) === 5)
                    {
                        $this->printer->tabEcho('fake user is full');
                        break;
                    }
                }
            }
        }
        $this->printer->endTabEcho('get_fake_user', 'get_fake_user');


        $this->printer->newTabEcho('statis_all_channel_data', "计算所有频道分数");
        $score_dao          = RoleStageScoreDao::model();
        $score_tablename    = $score_dao->getTableName();
        $cmd_get_stages_max = $score_dao->getDbConnect()->setText("SELECT max(score) as score,stage_index FROM {$score_tablename} where channel_code=:ch_code and  ymd=:ymd and user_id=:user_id and is_ok=:is_ok group  by stage_index;");
        foreach ($channel_ranks as $channel_code => $fake_user_ids)
        {
            $this->printer->newTabEcho('statis_one_channel', "统计 {$channel_code}");

            $bind      = [
                ':ch_code' => $channel_code,
                ':ymd'     => $ymd,
                ':is_ok'   => Opt::isOk,
            ];
            $user_rows = $score_dao->getDbConnect()->setText("select distinct user_id from {$score_tablename} where channel_code=:ch_code and  ymd=:ymd and is_ok=:is_ok ")->bindArray($bind)->queryAll();
            $user_cnt  = count($user_rows);
            $user_i    = 0;
            $this->printer->newTabEcho('get_user_all_stage_score', "获取 {$channel_code} 下，统计用户所有关卡分数之和");
            foreach ($user_rows as $user_row)
            {
                $user_i++;
                echo "\n {$user_i}/{$user_cnt}\n";
                $this->printer->tabEcho("{$user_i}/{$user_cnt}");
                $bind[':user_id']             = $user_row['user_id'];
                $user_score_rows              = $cmd_get_stages_max->bindArray($bind)->queryAll();
                $score                        = array_sum(array_column($user_score_rows, 'score'));
                $score_data_dao               = RoleScoreDataDao::model();
                $score_data_dao->channel_code = $channel_code;
                $score_data_dao->date_index   = $ymd;
                $score_data_dao->user_id      = $user_row['user_id'];
                $score_data_dao->stages_score = $score;
                $score_data_dao->scores       = json_encode($user_score_rows);
                $score_data_dao->setOnDuplicateKeyUpdate(['stages_score' => $score_data_dao->stages_score, 'scores' => $score_data_dao->scores]);
                $score_data_dao->insert(true);

                $this->printer->tabEcho(json_encode($user_score_rows, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
                $this->printer->tabEcho(json_encode($score_data_dao->getOuterDataArray(), JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));

            }
            $this->printer->endTabEcho('get_user_all_stage_score', "获取 {$channel_code} 下，统计用户所有关卡分数之和");


            $score_data_daos = RoleScoreDataDao::model()->addSort('stages_score', 'desc')->setLimit(0, 10000)->findAllByWhere([
                'channel_code' => $channel_code,
                'date_index'   => $ymd,
                'is_ok'        => Opt::isOk,
            ]);
            $true_user_score = count($score_data_daos) ? $score_data_daos[0]->stages_score : 10000;
            $fake_sn         = 5;
            $this->printer->newTabEcho('generate_fake_rank', " {$channel_code} 下，生成假数据");
            foreach ($fake_user_ids as $fake_user_i => $fake_user_id)
            {
                $rank_dao               = new RankTopDao();
                $rank_dao->channel_code = $channel_code;
                $rank_dao->date_index   = $ymd;
                $rank_dao->user_id      = $fake_user_id;
                $rank_dao->user_score   = $true_user_score + rand(50, 2000);
                $rank_dao->rank_sn      = $fake_sn - $fake_user_i;
                $rank_dao->is_fake      = Opt::YES;
                $rank_dao->setOnDuplicateKeyUpdate(['user_id' => $rank_dao->user_id, 'user_score' => $rank_dao->user_score]);
                $rank_dao->insert(false);
                $this->printer->tabEcho("\n fake_user:{$fake_user_i}\n");
                $this->printer->tabEcho(json_encode($rank_dao->getOpenInfo(), JSON_UNESCAPED_UNICODE));
                $true_user_score = $rank_dao->user_score;

            }
            $this->printer->endTabEcho('generate_fake_rank', " {$channel_code} 下，生成假数据");

            $this->printer->newTabEcho('generate_true_rank', " {$channel_code} 下，生成真数据");

            foreach ($score_data_daos as $data_i => $score_data_dao)
            {
                $rank_dao               = new RankTopDao();
                $rank_dao->channel_code = $score_data_dao->channel_code;
                $rank_dao->date_index   = $score_data_dao->date_index;
                $rank_dao->user_id      = $score_data_dao->user_id;
                $rank_dao->user_score   = $score_data_dao->stages_score;
                $rank_dao->rank_sn      = $data_i + 6;
                $rank_dao->is_fake      = Opt::isNotOk;
                $rank_dao->setOnDuplicateKeyUpdate(['user_id' => $rank_dao->user_id, 'user_score' => $rank_dao->user_score]);
                $rank_dao->insert(false);
                $this->printer->tabEcho("\n true user:{$data_i}\n");
                $this->printer->tabEcho(json_encode($rank_dao->getOpenInfo(), JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
            }
            $this->printer->endTabEcho('generate_true_rank', " {$channel_code} 下，生成真数据");

            $this->printer->endTabEcho('statis_one_channel', "统计 {$channel_code}");

        }

        $this->printer->endTabEcho('statis_all_channel_data', "计算所有频道分数");

        $this->printer->newTabEcho('rank_award', "要发奖了");

        foreach ($channel_map as $channel_code => $channel)
        {
            $this->printer->newTabEcho('rank_award_channel', "在{$channel_code} 发奖");
            // $rank_infos    = (new RankTop())->getList($channel_code, $ymd, true);
            $rank_models   = RankTop::model()->setLimit(0, 10000)->addSort('rank_sn', 'asc')->findAllByWhere(['channel_code' => $channel_code, 'date_index' => $ymd, 'is_ok' => Opt::isOk]);
            $channel_ranks = $channel->opts['rank'];

            foreach ($rank_models as $rank_i => $rank_model)
            {
                $rank_sn              = $rank_model->rank_sn;
                $user_id              = $rank_model->user_id;
                $matched_channel_rank = false;
                $this->printer->newTabEcho('channel_rank_info', "\n channel:{$channel_code} 排名:{$rank_sn} user_id:{$user_id} is_fake:{$rank_model->is_fake}\n");
                $this->printer->newTabEcho('channel_rank_info_match_rank', "匹配排名范围");

                foreach ($channel_ranks as $channel_rank)
                {
                    if ($channel_rank['start_rank'] <= $rank_sn && $rank_sn <= $channel_rank['end_rank'])
                    {
                        $this->printer->tabEcho("\n适用:");
                        $this->printer->tabEcho(json_encode($channel_rank, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
                        $matched_channel_rank = $channel_rank;
                        break;
                    }
                }
                $this->printer->endTabEcho('channel_rank_info_match_rank', "匹配排名范围");

                if ($matched_channel_rank === false)
                {
                    $this->printer->tabEcho("\n!!!!!!!!!!!!!!!!!!!!!! 没匹配  !!!!!!!!!!!!!!!!!!!!\n");
                }
                else
                {
                    $this->printer->newTabEcho('channel_rank_award2user', "发放奖励给用户");

                    foreach ($matched_channel_rank['awards'] as $award_sn => $award_info)
                    {
                        $award_his = new UserRankAwardHis();
                        $award_his->setRank($rank_model);

                        $this->printer->newTabEcho('channel_rank_award2user_item', json_encode($award_info, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
                        $user = (new User())->findByPk($user_id);
                        if (empty($award_info['item_flag']) || !is_array($award_info['amount']) || count($award_info['amount']) !== 2)
                        {
                            Sys::app()->logToFile("ERROR:{$channel_code} rank_sn:{$rank_i} award_sn:{$award_sn}", $award_info);
                            continue;
                        }
                        $ar = explode('/', $award_info['item_flag']);
                        if (count($ar) !== 2)
                        {
                            Sys::app()->logToFile("ERROR:{$channel_code} rank_sn:{$rank_i} award_sn:{$award_sn}", $award_info);
                            continue;
                        }
                        list($item_class, $item_code) = $ar;
                        $award_amount = $award_info['amount'][0];
                        if ($item_class === 'currency')
                        {
                            $this->printer->tabEcho("通货奖励:");
                            $goods_item    = Currency::model()->getItemByCode($item_code);
                            $goods_account = UserCurrency::model()->setUser($user)->getAccount($item_code);
                            $goods_his     = (new UserCurrencyHis())->setUserAccountModel($goods_account)->setOperationStep(3);
                            $goods_account->verifyKeyProperties();
                            $goods_his->src_remark = "{$channel->item_name} {$ymd} 第{$rank_sn}名";
                            $goods_record_res      = $goods_his->tryRecord(UserCurrencyHis::srcRankAward, "{$channel_code}_{$ymd}_{$rank_sn}", $award_amount);
                            if ($goods_record_res === false)
                            {
                                $goods_his = UserCurrencyHis::model()->findOneByWhere(['src' => UserCurrencyHis::srcRankAward, 'src_id' => "{$channel_code}_{$ymd}_{$rank_sn}", 'user_id' => $user->id, 'item_code' => $item_code]);
                                $this->printer->tabEcho("操作失败，请检查是否已经奖励过了");
                            }
                            else
                            {
                                ApiCache::model()->setCache('ChangeFlagUserCurrency', ['user_id' => $user_id], time());
                                $this->printer->tabEcho("正常");
                            }
                            $award_his->setItem($award_sn, $item_class, $item_code, $award_amount, $award_info['award_detail']);
                            $award_his->his_id       = $goods_his->id;
                            $award_his->award_status = UserRankAwardHis::stepOk;
                            $award_his->insert(false, false);
                        }
                        else if ($item_class === 'cg')
                        {
                            $this->printer->tabEcho("消耗性道具奖励:");
                            $goods_item    = ConsumableGoods::model()->getItemByCode($item_code);
                            $goods_account = UserCg::model()->setUser($user)->getAccount($item_code);
                            $goods_his     = (new UserCgHis())->setUserAccountModel($goods_account)->setOperationStep(3);
                            $goods_account->verifyKeyProperties();
                            $goods_his->src_remark = "{$channel->item_name} {$ymd} 第{$rank_sn}名";
                            $goods_record_res      = $goods_his->tryRecord(UserCgHis::srcRankAward, "{$channel_code}_{$ymd}_{$rank_sn}", $award_amount);
                            if ($goods_record_res === false)
                            {
                                $goods_his = UserCgHis::model()->findOneByWhere(['src' => UserCgHis::srcRankAward, 'src_id' => "{$channel_code}_{$ymd}_{$rank_sn}", 'user_id' => $user->id, 'item_code' => $item_code]);
                                $this->printer->tabEcho("操作失败，请检查是否已经奖励过了");
                            }
                            else
                            {
                                ApiCache::model()->setCache('ChangeFlagUserCurrency', ['user_id' => $user_id], time());
                                $this->printer->tabEcho("正常");
                            }
                            $award_his->setItem($award_sn, $item_class, $item_code, $award_amount, $award_info['award_detail']);
                            $award_his->his_id       = $goods_his->id;
                            $award_his->award_status = UserRankAwardHis::stepOk;
                            $award_his->insert(false, false);
                        }
                        else if ($item_class === 'object')
                        {
                            $this->printer->tabEcho("实物奖励:");
                            $goods_item            = MObject::model()->getItemByCode($item_code);
                            $goods_his             = (new UserObjectHis())->setOperationStep(1);
                            $goods_his->user_id    = $user_id;
                            $goods_his->src_remark = "{$channel->item_name} {$ymd} 第{$rank_sn}名";
                            $goods_record_res      = $goods_his->tryRecord(UserCurrencyHis::srcRankAward, "{$channel_code}_{$ymd}_{$rank_sn}", $goods_item, $award_amount);
                            if ($goods_record_res === false)
                            {
                                $goods_his = UserObjectHis::model()->findOneByWhere(['src' => UserCurrencyHis::srcRankAward, 'src_id' => "{$channel_code}_{$ymd}_{$rank_sn}", 'user_id' => $user->id, 'item_code' => $item_code]);
                                $this->printer->tabEcho("操作失败，请检查是否已经奖励过了");
                            }
                            else
                            {
                                ApiCache::model()->setCache('ChangeFlagUserObject', ['user_id' => $user_id], time());
                                $this->printer->tabEcho("正常");
                            }
                            $award_his->setItem($award_sn, $item_class, $item_code, $award_amount, $award_info['award_detail']);
                            $award_his->his_id       = $goods_his->id;
                            $award_his->award_status = UserRankAwardHis::stepWaitPostalInfo;
                            $award_his->insert(false, false);
                        }
                        else
                        {
                            $this->printer->tabEcho("!!!!!!!!!!!! 无法处理 !!!!!!!!!!!!");
                        }
                        $this->printer->newTabEcho('channel_rank_award2user_item', '#');

                    }
                    $this->printer->endTabEcho('channel_rank_award2user', "发放奖励给用户");

                }
                $this->printer->newTabEcho('channel_rank_info', "end");
            }
            $this->printer->endTabEcho('rank_award_channel', "在{$channel_code} 发奖");

        }

        $this->printer->endTabEcho('rank_award', "发奖完了");

        $key = "rank{$ymd}";


    }


    public function generateAndReward()
    {
        $this->printer->newTabEcho('generateRank', "准备生成排行榜");
        $this->generateRank();
        $this->printer->endTabEcho('generateRank', "排行榜已经完成");

        $this->printer->newTabEcho('payReward', "要发奖了");
        $this->payReward();
        $this->printer->endTabEcho('payReward', "奖励已经发放完了");

    }

    public function generateRank()
    {
        $now_date = date('Y-m-d H:i:s', time());
        echo "\nnow:{$now_date} generate  start\n";
        $fake_user_ids = array_map(function ($model) { return $model->id; }, UserFakeDao::model()->setLimit(0, 10000)->findAllByWhere(['is_ok' => Opt::isOk]));
        $channels      = Channel::model()->findAllByWhere(['is_ok' => Opt::isOk]);

        $channel_ranks = [];
        /** @var Channel[] $channel_map */
        $channel_map         = [];
        $ymd                 = $this->ymd;
        $fake_user_max_index = count($fake_user_ids) - 1;

        $this->printer->newTabEcho('get_fake_user', 'get_fake_user');

        $channel_fake_user_nums = [
            'public_channel' => 5,
            'vip1_channel'   => 10,
            'vip2_channel'   => 10,
            'vip3_channel'   => 10,
        ];
        foreach ($channels as $channel)
        {
            $channel_ranks[$channel->item_code] = [];
            $channel_map[$channel->item_code]   = $channel;

            while (1)
            {
                $id = $fake_user_ids[rand(0, $fake_user_max_index)];
                if (!in_array($id, $channel_ranks[$channel->item_code], true))
                {
                    $channel_ranks[$channel->item_code][] = $id;
                    if (count($channel_ranks[$channel->item_code]) === $channel_fake_user_nums[$channel->item_code])
                    {
                        $this->printer->tabEcho('fake user is full');
                        break;
                    }
                }
            }
        }
        $this->printer->endTabEcho('get_fake_user', 'get_fake_user');


        $this->printer->newTabEcho('statis_all_channel_data', "计算所有频道分数");
        $score_dao          = RoleStageScoreDao::model();
        $score_tablename    = $score_dao->getTableName();
        $cmd_get_stages_max = $score_dao->getDbConnect()->setText("SELECT max(score) as score,stage_index FROM {$score_tablename} where channel_code=:ch_code and  ymd=:ymd and user_id=:user_id and is_ok=:is_ok group  by stage_index;");
        foreach ($channel_ranks as $channel_code => $fake_user_ids)
        {
            $this->printer->newTabEcho('statis_one_channel', "统计 {$channel_code}");

            $bind      = [
                ':ch_code' => $channel_code,
                ':ymd'     => $ymd,
                ':is_ok'   => Opt::isOk,
            ];
            $user_rows = $score_dao->getDbConnect()->setText("select distinct user_id from {$score_tablename} where channel_code=:ch_code and  ymd=:ymd and is_ok=:is_ok ")->bindArray($bind)->queryAll();
            $user_cnt  = count($user_rows);
            $user_i    = 0;
            $this->printer->newTabEcho('get_user_all_stage_score', "获取 {$channel_code} 下，统计用户所有关卡分数之和");
            foreach ($user_rows as $user_row)
            {
                $user_i++;
                echo "\n {$user_i}/{$user_cnt}\n";
                $this->printer->tabEcho("{$user_i}/{$user_cnt}");
                $bind[':user_id']             = $user_row['user_id'];
                $user_score_rows              = $cmd_get_stages_max->bindArray($bind)->queryAll();
                $score                        = array_sum(array_column($user_score_rows, 'score'));
                $score_data_dao               = RoleScoreDataDao::model();
                $score_data_dao->channel_code = $channel_code;
                $score_data_dao->date_index   = $ymd;
                $score_data_dao->user_id      = $user_row['user_id'];
                $score_data_dao->stages_score = $score;
                $score_data_dao->scores       = json_encode($user_score_rows);
                $score_data_dao->setOnDuplicateKeyUpdate(['stages_score' => $score_data_dao->stages_score, 'scores' => $score_data_dao->scores]);
                $score_data_dao->insert(true);

                $this->printer->tabEcho(json_encode($user_score_rows, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
                $this->printer->tabEcho(json_encode($score_data_dao->getOuterDataArray(), JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));

            }
            $this->printer->endTabEcho('get_user_all_stage_score', "获取 {$channel_code} 下，统计用户所有关卡分数之和");


            $score_data_daos = RoleScoreDataDao::model()->addSort('stages_score', 'desc')->setLimit(0, 10000)->findAllByWhere([
                'channel_code' => $channel_code,
                'date_index'   => $ymd,
                'is_ok'        => Opt::isOk,
            ]);
            $true_user_score = count($score_data_daos) ? $score_data_daos[0]->stages_score : 10000;
            $fake_sn         = $channel_fake_user_nums[$channel_code];
            $this->printer->newTabEcho('generate_fake_rank', " {$channel_code} 下，生成假数据");
            foreach ($fake_user_ids as $fake_user_i => $fake_user_id)
            {
                $rank_dao               = new RankTopDao();
                $rank_dao->channel_code = $channel_code;
                $rank_dao->date_index   = $ymd;
                $rank_dao->user_id      = $fake_user_id;
                $rank_dao->user_score   = $true_user_score + rand(50, 2000);
                $rank_dao->rank_sn      = $fake_sn - $fake_user_i;
                $rank_dao->is_fake      = Opt::YES;
                $rank_dao->setOnDuplicateKeyUpdate(['user_id' => $rank_dao->user_id, 'user_score' => $rank_dao->user_score]);
                $rank_dao->insert(false);
                $this->printer->tabEcho("\n fake_user:{$fake_user_i}\n");
                $this->printer->tabEcho(json_encode($rank_dao->getOpenInfo(), JSON_UNESCAPED_UNICODE));
                $true_user_score = $rank_dao->user_score;

            }
            $this->printer->endTabEcho('generate_fake_rank', " {$channel_code} 下，生成假数据");

            $this->printer->newTabEcho('generate_true_rank', " {$channel_code} 下，生成真数据");
            $true_user_start_sn = $fake_sn + 1;
            foreach ($score_data_daos as $data_i => $score_data_dao)
            {
                $rank_dao               = new RankTopDao();
                $rank_dao->channel_code = $score_data_dao->channel_code;
                $rank_dao->date_index   = $score_data_dao->date_index;
                $rank_dao->user_id      = $score_data_dao->user_id;
                $rank_dao->user_score   = $score_data_dao->stages_score;
                $rank_dao->rank_sn      = $data_i + $true_user_start_sn;
                $rank_dao->is_fake      = Opt::NOT;
                $rank_dao->setOnDuplicateKeyUpdate(['user_id' => $rank_dao->user_id, 'user_score' => $rank_dao->user_score]);
                $rank_dao->insert(false);
                $this->printer->tabEcho("\n true user:{$data_i}\n");
                $this->printer->tabEcho(json_encode($rank_dao->getOpenInfo(), JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
            }
            $this->printer->endTabEcho('generate_true_rank', " {$channel_code} 下，生成真数据");

            $this->printer->endTabEcho('statis_one_channel', "统计 {$channel_code}");

        }

        $this->printer->endTabEcho('statis_all_channel_data', "计算所有频道分数");

        $key = "rank{$ymd}";


    }

    public function payReward()
    {
        $ymd = $this->ymd;

        $channels = Channel::model()->findAllByWhere(['is_ok' => Opt::YES]);

        foreach ($channels as $channel_id => $channel)
        {
            $channel_code = $channel->item_code;
            $this->printer->newTabEcho('rank_award_channel', "在{$channel_code} 发奖");
            // $rank_infos    = (new RankTop())->getList($channel_code, $ymd, true);

            $channel_ranks = $channel->opts['rank'];
            $max           = 0;
            foreach ($channel_ranks as $rank_info)
            {
                if ($rank_info['end_rank'] > $max)
                {
                    $max = $rank_info['end_rank'];
                }
            }
            $rank_models = RankTop::model()->setLimit(0, $max)->addSort('rank_sn', 'asc')->findAllByWhere(['channel_code' => $channel_code, 'date_index' => $ymd, 'is_ok' => Opt::isOk]);
            foreach ($rank_models as $rank_i => $rank_model)
            {
                $rank_sn = $rank_model->rank_sn;
                $user_id = $rank_model->user_id;
                $user    = (new User())->findByPk($user_id);

                $matched_channel_rank = false;
                $this->printer->newTabEcho('channel_rank_info', "\n channel:{$channel_code} 排名:{$rank_sn} user_id:{$user_id} is_fake:{$rank_model->is_fake}\n");
                $this->printer->newTabEcho('channel_rank_info_match_rank', "匹配排名范围");

                foreach ($channel_ranks as $channel_rank)
                {
                    if ($channel_rank['start_rank'] <= $rank_sn && $rank_sn <= $channel_rank['end_rank'])
                    {
                        $this->printer->tabEcho("\n适用:");
                        $this->printer->tabEcho(json_encode($channel_rank, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
                        $matched_channel_rank = $channel_rank;
                        break;
                    }
                }
                $this->printer->endTabEcho('channel_rank_info_match_rank', "匹配排名范围");

                if ($matched_channel_rank === false)
                {
                    $this->printer->tabEcho("\n!!!!!!!!!!!!!!!!!!!!!! 没匹配  !!!!!!!!!!!!!!!!!!!!\n");
                }
                else
                {
                    $this->printer->newTabEcho('channel_rank_award2user', "发放奖励给用户");

                    foreach ($matched_channel_rank['awards'] as $award_sn => $award_info)
                    {

                        $this->printer->newTabEcho('channel_rank_award2user_item', '#');
                        $this->addReward($channel, $rank_model, $user, $award_sn, $award_info);
                        $this->printer->endTabEcho('channel_rank_award2user_item', '#');


                    }
                    $this->printer->endTabEcho('channel_rank_award2user', "发放奖励给用户");

                }
                $this->printer->newTabEcho('channel_rank_info', "end");
            }
            $this->printer->endTabEcho('rank_award_channel', "在{$channel_code} 发奖");

        }
    }

    public function rePayReward()
    {
        $channel_code = $this->inputDataBox->getStringNotNull('channel_code');
        $channel      = Channel::model()->getItemByCode($channel_code, true);
        $sns          = explode(',', $this->inputDataBox->getStringNotNull('rank_sns'));
        $ymd          = $this->ymd;

        $rank_models   = RankTop::model()->setLimit(0, 1000)->addSort('rank_sn', 'asc')->findAllByWhere(['channel_code' => $channel_code, 'date_index' => $ymd, 'rank_sn' => $sns, 'is_ok' => Opt::isOk]);
        $channel_ranks = $channel->opts['rank'];

        foreach ($rank_models as $rank_i => $rank_model)
        {
            $rank_sn = $rank_model->rank_sn;
            $user_id = $rank_model->user_id;
            $user    = (new User())->findByPk($user_id);

            $this->printer->newTabEcho('channel_rank_info', "\n channel:{$channel_code} 排名:{$rank_sn} user_id:{$user_id} is_fake:{$rank_model->is_fake}\n");


            $this->printer->newTabEcho('channel_rank_award2user', "发放奖励给用户");
            $matched_channel_rank = false;
            foreach ($channel_ranks as $channel_rank)
            {
                if ($channel_rank['start_rank'] <= $rank_sn && $rank_sn <= $channel_rank['end_rank'])
                {
                    $this->printer->tabEcho("\n适用:");
                    $this->printer->tabEcho(json_encode($channel_rank, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
                    $matched_channel_rank = $channel_rank;
                    break;
                }
            }

            if ($matched_channel_rank === false)
            {
                $this->printer->endTabEcho('channel_rank_award2user', "没有适配的rank 配置");
            }
            foreach ($matched_channel_rank['awards'] as $award_sn => $award_info)
            {
                $cond      = ['channel_code' => $channel_code, 'rank_sn' => $rank_model->rank_sn, 'date_index' => $rank_model->date_index, 'award_sn' => $award_sn];
                $award_his = UserRankAwardHis::model()->findOneByWhere($cond);
                if (empty($award_his))
                {
                    var_export($cond);
                    fwrite(STDOUT, "----------------------------------\n找不到 是否 要创建新的 [yes | no ]:");
                    $input_str = trim(fgets(STDIN));
                    echo "\n----------------------------------\n";
                    if ($input_str === 'yes')
                    {
                        $award_his = false;
                    }
                    else
                    {
                        continue;
                    }
                }
                $this->printer->newTabEcho('channel_rank_award2user_item', '#');
                $this->addReward($channel, $rank_model, $user, $award_sn, $award_info, $award_his);
                $this->printer->endTabEcho('channel_rank_award2user_item', '#');


            }
            $this->printer->endTabEcho('channel_rank_award2user', "发放奖励给用户");


            $this->printer->newTabEcho('channel_rank_info', "end");
        }

    }

    public function addReward(Channel $channel, RankTop $rank, User $user, $award_sn, $award_info, $award_his_dao = false)
    {

        $rank_sn = $rank->rank_sn;
        $ymd     = $this->ymd;
        $user_id = $user->id;
        if ($award_his_dao === false)
        {
            $award_his               = new UserRankAwardHis();
            $award_his->rank_sn      = $rank_sn;
            $award_his->channel_code = $channel->item_code;
            $award_his->date_index   = $ymd;
            $award_his->user_id      = $user->id;
            $award_his->is_fake      = $rank->is_fake;
        }
        else
        {
            $award_his = $award_his_dao;
        }


        $channel_code = $channel->item_code;
        $this->printer->newTabEcho('channel_rank_award2user_item', json_encode($award_info, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
        if (empty($award_info['item_flag']) || !is_array($award_info['amount']) || count($award_info['amount']) !== 2)
        {
            Sys::app()->logToFile("ERROR:{$channel_code} rank_sn:{$rank_sn} award_sn:{$award_sn}", $award_info);
            return false;
        }
        $ar = explode('/', $award_info['item_flag']);
        if (count($ar) !== 2)
        {
            Sys::app()->logToFile("ERROR:{$channel_code} rank_sn:{$rank_sn} award_sn:{$award_sn}", $award_info);
            return false;
        }
        list($item_class, $item_code) = $ar;
        $award_amount = $award_info['amount'][0];

        if ($item_class === 'currency')
        {
            $this->printer->tabEcho("通货奖励:");
            $goods_item    = Currency::model()->getItemByCode($item_code);
            $goods_account = UserCurrency::model()->setUser($user)->getAccount($item_code);
            $goods_his     = (new UserCurrencyHis())->setUserAccountModel($goods_account)->setOperationStep(3);
            $goods_account->verifyKeyProperties();
            $goods_his->src_remark = "{$channel->item_name} {$ymd} 第{$rank_sn}名";
            $goods_record_res      = $goods_his->tryRecord(UserCurrencyHis::srcRankAward, "{$channel_code}_{$ymd}_{$rank_sn}", $award_amount);
            if ($goods_record_res === false)
            {
                $goods_his = UserCurrencyHis::model()->findOneByWhere(['src' => UserCurrencyHis::srcRankAward, 'src_id' => "{$channel_code}_{$ymd}_{$rank_sn}", 'user_id' => $user->id, 'item_code' => $item_code]);
                $this->printer->tabEcho("操作失败，请检查是否已经奖励过了");
            }
            else
            {
                ApiCache::model()->setCache('ChangeFlagUserCurrency', ['user_id' => $user_id], time());
                $this->printer->tabEcho("正常");
            }
            $award_his->setItem($award_sn, $item_class, $item_code, $award_amount, $award_info['award_detail']);
            $award_his->his_id       = $goods_his->id;
            $award_his->award_status = UserRankAwardHis::stepOk;
            if ($award_his_dao === false)
            {
                $award_his->insert(false, false);
            }
            else
            {
                $award_his->update(false, false);
            }
        }
        else if ($item_class === 'cg')
        {
            $this->printer->tabEcho("消耗性道具奖励:");
            $goods_item    = ConsumableGoods::model()->getItemByCode($item_code);
            $goods_account = UserCg::model()->setUser($user)->getAccount($item_code);
            $goods_his     = (new UserCgHis())->setUserAccountModel($goods_account)->setOperationStep(3);
            $goods_account->verifyKeyProperties();
            $goods_his->src_remark = "{$channel->item_name} {$ymd} 第{$rank_sn}名";
            $goods_record_res      = $goods_his->tryRecord(UserCgHis::srcRankAward, "{$channel_code}_{$ymd}_{$rank_sn}", $award_amount);
            if ($goods_record_res === false)
            {
                $goods_his = UserCgHis::model()->findOneByWhere(['src' => UserCgHis::srcRankAward, 'src_id' => "{$channel_code}_{$ymd}_{$rank_sn}", 'user_id' => $user->id, 'item_code' => $item_code]);
                $this->printer->tabEcho("操作失败，请检查是否已经奖励过了");
            }
            else
            {
                ApiCache::model()->setCache('ChangeFlagUserCurrency', ['user_id' => $user_id], time());
                $this->printer->tabEcho("正常");
            }
            $award_his->setItem($award_sn, $item_class, $item_code, $award_amount, $award_info['award_detail']);
            $award_his->his_id       = $goods_his->id;
            $award_his->award_status = UserRankAwardHis::stepOk;
            if ($award_his_dao === false)
            {
                $award_his->insert(false, false);
            }
            else
            {
                $award_his->update(false, false);
            }
        }
        else if ($item_class === 'object')
        {
            $this->printer->tabEcho("实物奖励:");
            $goods_item            = MObject::model()->getItemByCode($item_code);
            $goods_his             = (new UserObjectHis())->setOperationStep(1);
            $goods_his->user_id    = $user_id;
            $goods_his->src_remark = "{$channel->item_name} {$ymd} 第{$rank_sn}名";
            $goods_record_res      = $goods_his->tryRecord(UserObjectHis::srcRankAward, "{$channel_code}_{$ymd}_{$rank_sn}", $goods_item, $award_amount);
            if ($goods_record_res === false)
            {
                $goods_his = UserObjectHis::model()->findOneByWhere(['src' => UserObjectHis::srcRankAward, 'src_id' => "{$channel_code}_{$ymd}_{$rank_sn}", 'user_id' => $user->id, 'item_code' => $item_code]);
                $this->printer->tabEcho("操作失败，请检查是否已经奖励过了");
            }
            else
            {
                ApiCache::model()->setCache('ChangeFlagUserObject', ['user_id' => $user_id], time());
                $this->printer->tabEcho("正常");
            }
            $award_his->setItem($award_sn, $item_class, $item_code, $award_amount, $award_info['award_detail']);
            $award_his->his_id       = $goods_his->id;
            $award_his->award_status = UserRankAwardHis::stepWaitPostalInfo;
            if ($award_his_dao === false)
            {
                $award_his->insert(false, false);
            }
            else
            {
                $award_his->update(false, false);
            }
        }
        else
        {
            $this->printer->tabEcho("!!!!!!!!!!!! 无法处理 !!!!!!!!!!!!");
        }
    }

}